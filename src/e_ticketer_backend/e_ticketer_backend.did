type Error = variant {
  Err : record { msg : text; ticket : Ticket };
  NotFound : record { msg : text };
  NotCreated : record { msg : text };
};
type Event = record {
  id : nat64;
  updated_at : opt nat64;
  date : text;
  attendee_ids : vec nat64;
  name : text;
  description : text;
  created_at : nat64;
  start_time : text;
  ticket_ids : vec nat64;
  location : text;
};
type EventPayload = record {
  date : text;
  name : text;
  description : text;
  start_time : text;
  location : text;
};
type Result = variant { Ok : Event; Err : Error };
type Result_1 = variant { Ok : Ticket; Err : Error };
type Result_2 = variant { Ok : User; Err : Error };
type Result_3 = variant { Ok : text; Err : Error };
type Result_4 = variant { Ok : vec User; Err : Error };
type Result_5 = variant { Ok : vec Ticket; Err : Error };
type Ticket = record {
  id : nat64;
  updated_at : opt nat64;
  created_at : nat64;
  user_id : nat64;
  event_id : nat64;
};
type TicketPayload = record { user_id : nat64; event_id : nat64 };
type User = record {
  id : nat64;
  event_ids : vec nat64;
  updated_at : opt nat64;
  password : text;
  name : text;
  created_at : nat64;
  email : text;
  ticket_ids : vec nat64;
};
type UserPayload = record { password : text; name : text; email : text };
service : {
  create_event : (EventPayload) -> (Result);
  create_ticket : (TicketPayload) -> (Result_1);
  create_user : (UserPayload) -> (Result_2);
  delete_ticket : (nat64) -> (Result_3);
  get_all_events : () -> (vec Event) query;
  get_event : (nat64) -> (Result) query;
  get_event_attendees : (nat64) -> (Result_4) query;
  get_event_tickets : (nat64) -> (Result_5) query;
  get_ticket : (nat64) -> (Result_1) query;
  get_user : (nat64) -> (Result_2) query;
  get_user_tickets : (nat64) -> (Result_5) query;
  update_event : (nat64, EventPayload) -> (Result);
  update_user : (nat64, UserPayload) -> (Result_2);
}
